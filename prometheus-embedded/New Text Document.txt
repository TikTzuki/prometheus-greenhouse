#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include "mcu_handle.h"
#include<ArduinoJson.h>
#include<SoftwareSerial.h>
const char* ssid = "long 2.4G";
const char* password = "Ld201199";
const char* mqtt_server = "192.168.1.3";
#define MSG_BUFFER_SIZE  (50)
char msg[MSG_BUFFER_SIZE];
int value = 0;
#define WaterSensor 13
const int ledGPIO5=5;
#define sensorIn A0
const char *Topic="sensor/0";
String message;
String _topic;
String mess_setup="";
const char *Toopic="available";
const char *sensor1="sensor/1";
int counter=0;
int counter1=0;
String split_str[5];
char c;
String dataIn;
#define num_seed 5
String uuid[num_seed];
String all_mess[num_seed];
int counter_all=0; 
String object[num_seed];
String mac_address;
WiFiClient espClient;
String actuator_topic="actuator_available";
#define PIN 7
PubSubClient client(espClient);
String actuator_payload="";
String message_payload="";
int t=0;
void setup(){
  Serial.begin(115200);
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
  mac_address=WiFi.macAddress();
  pinMode(PIN,OUTPUT);
  object_setup(object);
  }
void setup_wifi() {

  delay(10);
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  randomSeed(micros());

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
  client.subscribe("ESP8266/4");
  client.subscribe("ESP8266/5");
  client.subscribe("allow");
  for(int i=0;i<num_seed;i++)
  { String sub=mac_address+"/"+object[i];
    client.subscribe(sub.c_str());
  }
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.println("fuckkkk");
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  _topic="";
  message="";
  for (int i = 0; i < length; i++) {
    message+=(char)payload[i];
  }
  Serial.println(message);
  _topic+=topic;
  _topic.trim();
  if(_topic!=mac_address+"/pump")
  {
     all_mess[counter_all]=message; 
  }
  counter_all+=1;
}

void reconnect() {
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");

    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    if (client.connect("ESP8266Client")) {
      Serial.println("connected");
      client.subscribe("ESP8266/4");
      client.subscribe("ESP8266/5");
      client.subscribe("allow");
    for(int i=0;i<num_seed;i++)
  {  String sub=mac_address+"/"+object[i];
    client.subscribe(sub.c_str());
  }
  } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");      
    }
  }
}

void readData()
{  while(Serial.available()>0)
  {
    c=Serial.read();
    if(c=='\n')
    {
      break;
    }
    else
    {
      dataIn+=c;
    }
  }
  if(c=='\n')  
  { 
    dataIn.trim();
    if(dataIn=="")
    {
     return;
    }
    else
    { 
      String* data_pub=splitString(dataIn,":");
      Serial.println(data_pub[0]);
    if(data_pub[0]=="Water")
    {
    client.publish(all_mess[0].c_str(),data_pub[1].c_str());
    }
    else if(data_pub[0]=="Moisture")
    {
      client.publish(all_mess[1].c_str(),data_pub[1].c_str());
    }
    else if(data_pub[0]=="Temperature")
    {
      String* humid_temp=splitString(data_pub[1]," ");
      String humid=humid_temp[0];
      String temp=humid_temp[1];
      client.publish(all_mess[2].c_str(),humid.c_str());
      client.publish(all_mess[3].c_str(),temp.c_str());
    }
    c=0;
    dataIn="";
    }
  }
}

void handleData()
{
readData();
  }

void loop() {
  if (!client.connected()) {
    reconnect();
      }
  client.loop();
}
